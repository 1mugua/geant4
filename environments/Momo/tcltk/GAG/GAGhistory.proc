##	GAGhistory
##	(GAG procedure)
##	Procedures
##	make Command History window, execute a memorised command, save to a file
##
##	k.ohtubo(Tubocky)
##
##	1998.3.16
##	Tcl/Tk version 8.0
##	1998 July 5 GEANT4 Beta-01

proc Command_History {} {
	global HISTORY FONT F_COLOR B_COLOR

	if {![winfo exists .log.text]} {
		Message_Skeleton -icon warning -button O.K. \
			-message "Warning!\nWhat's happen?"
		if {$FONT != ""} {
			Chnage_Font $FONT .msgskeleton
		}
		if {$F_COLOR != "" && $B_COLOR != ""} {
			Change_Color $F_COLOR $B_COLOR .msgskeleton
		}
		.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
		return
	}

	if {![info exists HISTORY]} {
		Message_Skeleton -icon warning -button O.K. \
			-message "Warning!\nWhat's happen?"
		if {$FONT != ""} {
			Chnage_Font $FONT .msgskeleton
		}
		if {$F_COLOR != "" && $B_COLOR != ""} {
			Change_Color $F_COLOR $B_COLOR .msgskeleton
		}
		.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
		return
	}

	if [winfo exists .ch] {
		raise .ch
		focus .ch.main.text
		return
	}


	toplevel .ch -highlightthickness 0
	wm title .ch "Command History Manager"
	wm protocol .ch WM_DELETEWINDOW {
		.comm.ent delete 0 end
	}


	frame .ch.butt -highlightthickness 0
	pack .ch.butt -side top -fill x

	menubutton .ch.butt.func -text Function -menu .ch.butt.func.menu \
		-bd 3 -relief raised -highlightthickness 0
	pack .ch.butt.func -side left

	menu .ch.butt.func.menu -tearoff 0
	.ch.butt.func.menu add command -label Clear -command {
		.ch.main.text delete 0.0 end
		.comm.ent delete 0 end
	}
	.ch.butt.func.menu add command -label Restore -command {
		.ch.butt.func.menu invoke 0
		foreach comm $HISTORY {
			.ch.main.text insert end $comm\n
		}
	}
	.ch.butt.func.menu add command -label "Save command history" \
		-command CH_Save_Window
	.ch.butt.func.menu add command -label Search -command Search_String_CH
	.ch.butt.func.menu add separator
	.ch.butt.func.menu add command -label "Close command history manager" \
		-command {destroy .ch}


	frame .ch.main -highlightthickness 0
	pack .ch.main -side top -fill both -expand 1

	text .ch.main.text -width 50 -bd 2 -relief sunken \
		-yscrollcommand ".ch.main.scroll set" -highlightthickness 0
	pack .ch.main.text -side left -fill both -expand 1

	scrollbar .ch.main.scroll -command ".ch.main.text yview" \
		-highlightthickness 0
	pack .ch.main.scroll -side left -fill y


#	Binding

	bind .ch.main.text <ButtonRelease> {
		scan [.ch.main.text index insert] %%d.%%d LINE HEAD
		.comm.ent delete 0 end
		.comm.ent insert end [.ch.main.text get $LINE.0 $LINE.end]
	}

	bind .ch.main.text <Double-Button> {
		scan [.ch.main.text index insert] %%d.%%d LINE HEAD
		.comm.ent delete 0 end
		.comm.ent insert end [.ch.main.text get $LINE.0 $LINE.end]
		.dummy invoke
	}

	bind .ch.main.text <Double-ButtonRelease> {.comm.ent delete 0 end}

	bind .ch <Enter> {
		focus .ch.main.text
	}


	if {$FONT != ""} {
		Change_Font $FONT .ch
	}
	if {$F_COLOR != "" && $B_COLOR != ""} {
		Change_Color $F_COLOR $B_COLOR .ch
	}
	Win_Size .ch
	Tab_off
	Control
	foreach comm $HISTORY {
		.ch.main.text insert end $comm\n
	}
}

#	make Save Command History window
proc CH_Save_Window {} {
	global FONT F_COLOR B_COLOR errorCode errorInfo env

	if [winfo exists .sach] {
		raise .sach
		focus .sach.name.ent
		return
	}

	set DIR $env(G_PATH)
	File_List_Skeleton .sach

	.sach.butt.b0 configure -text "Save command history" -command {
		set Name [.sach.name.ent get]
		if {$Name != ""} {
			if [file isdirectory $env(G_PATH)/$Name] {
				Change_Path $Name
				set END [string length $env(HOME)]
				set PATH ~[string range $env(G_PATH) $END end]
### display the current dir name
				set dlist [file split $PATH]
				set cdir [lindex $dlist end]
				.sach.info.label1 configure -text $cdir

##				.sach.info.label1 configure -text $PATH
				.sach.butt.b1 invoke
				Put_File_List .sach
			} elseif [file executable $env(G_PATH)/$Name] {
				Message_Skeleton -icon warning -button O.K. \
					-message "Warning!\n\"$Name\"is an executable file."
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
			} elseif [file isfile $env(G_PATH)/$Name] {
				Message_Skeleton -icon question -button {Yes No} \
					-message "$Name: Overwrite?"
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {
					destroy .msgskeleton
					CH_Save
				}
				.msgskeleton.butt.1 configure -command {destroy .msgskeleton}
			} else {
				Message_Skeleton -icon question -button {Yes No} \
					-message "$Name: New file?"
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {
					destroy .msgskeleton
					CH_Save
				}
				.msgskeleton.butt.1 configure -command {destroy .msgskeleton}
			}
		}
	}

	.sach.butt.b1 configure -text Clear -command {
		.sach.select.list see 0
		.sach.select.list selection clear 0 end
		focus .sach.name.ent
		.sach.name.ent delete 0 end
		set END [string length $env(HOME)]
		set PATH ~[string range $env(G_PATH) $END end]
### display the current dir name
				set dlist [file split $PATH]
				set cdir [lindex $dlist end]
				.sach.info.label1 configure -text $cdir
##		.sach.info.label1 configure -text $PATH
		Put_File_List .sach
	}

	.sach.butt.b2 configure -text Cancel -command {
		destroy .sach
	}


#	Binding

	bind .sach.select.list <ButtonRelease> {
		if {![catch {selection get} GET]} {
			if [file isdirectory $env(G_PATH)/$GET] {
				Change_Path $GET
				set END [string length $env(HOME)]
				set PATH ~[string range $env(G_PATH) $END end]
### display the current dir name
				set dlist [file split $PATH]
				set cdir [lindex $dlist end]
				.sach.info.label1 configure -text $cdir
##				.sach.info.label1 configure -text $PATH
				.sach.butt.b1 invoke
				Put_File_List .sach
			} else {
				.sach.name.ent delete 0 end
				.sach.name.ent insert end $GET
			}
		}
		if {$errorCode != "NONE"} {
			set errorCode NONE
		}
		if {$errorInfo != ""} {
			set errorInfo ""
		}
	}

	bind .sach.select.list <Double-Button> {
		set Name [.sach.name.ent get]
		if {$Name != ""} {
			if [file executable $env(G_PATH)/$Name] {
				Message_Skeleton -icon warning -button O.K. \
					-message "Warning!\n\"$Name\"is an executable file."
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
			} elseif [file isfile $env(G_PATH)/$Name] {
				Message_Skeleton -icon question -button {Yes No} \
					-message "$Name: Overwrite?"
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {
					destroy .msgskeleton
					CH_Save
				}
				.msgskeleton.butt.1 configure -command {destroy .msgskeleton}
			} else {
				Message_Skeleton -icon question -button {Yes No} \
					-message "$Name: New file?"
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {
					destroy .msgskeleton
					CH_Save
				}
				.msgekeleton.butt.1 configure -command {destroy .msgskeleton}
			}
		}
	}

	bind .sach.select.list <Double-ButtonRelease> {}

	bind .sach.name.ent <Return> {.sach.butt.b0 invoke}

	bind .sach <Enter> {
		raise .sach
		focus .sach.name.ent
	}


	wm title .sach "Save command history"
	wm protocol .sach WM_DELETEWINDOW {
		grab release .sach
		Change_Path $DIR
	}
	Put_File_List .sach
	if {$FONT != ""} {
		Change_Font $FONT .sach
	}
	if {$F_COLOR != "" && $B_COLOR != ""} {
		Change_Color $F_COLOR $B_COLOR .sach
	}
	Win_Size .sach
	Tab_off
	Control
	grab set .sach
}

#	save Command Histry & Check file open
proc CH_Save {} {
	global FONT F_COLOR B_COLOR errorCode errorInfo env

	if {![winfo exists .sach]} {
		Message_Skeleton -icon warning -button O.K. \
			-message "Warning!\nWhat's happen?"
		if {$FONT != ""} {
			Change_Font $FONT .msgskeleton
		}
		if {$F_COLOR != "" && $B_COLOR != ""} {
			Change_Color $F_COLOR $B_COLOR .msgskeleton
		}
		.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
		return
	}

	set Name [.sach.name.ent get]

	if {![catch {open $env(G_PATH)/$Name w} file_ID]} {
		puts $file_ID [.ch.main.text get 0.0 end]
		close $file_ID
	} else {
		Message_Skeleton -icon warning -button O.K. \
			-message "Cannot open."
		if {$FONT != ""} {
			Change_Font $FONT .msgskeleton
		}
		if {$F_COLOR != "" && $B_COLOR != ""} {
			Change_Color $F_COLOR $B_COLOR .msgskeleton
		}
		.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
	}

	if {$errorCode != "NONE"} {
		set errorCode NONE
	}
	if {$errorInfo != ""} {
		set errorInfo ""
	}
}

#	make Search Command History window
proc Search_String_CH {} {
	global FONT SEARCH REPLACE F_COLOR B_COLOR

	if {![winfo exists .ch.main.text]} {
		Message_Skeleton -icon warning -button O.K. \
			-message "Warning!\nWhat's happen?"
		if {$FONT != ""} {
			Change_Font $FONT .msgskeleton
		}
		if {$F_COLOR != "" && $B_COLOR != ""} {
			Change_Color $F_COLOR $B_COLOR .msgskeleton
		}
		.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
		return
	}

	if [winfo exists .sech] {
		raise .sech
		focus .sech.ent.search
		return
	}


	toplevel .sech -highlightthickness 0
	wm title .sech "Search Command History"
	wm protocol .sech WM_DELETE_WINDOW {
		.ch.main.text tag remove SEARCH_TAG 1.0 end
		.ch.main.text tag remove SEARCH_ALL_TAG 1.0 end
		destroy .sech
	}

	frame .sech.butt -highlightthickness 0
	pack .sech.butt -side top -fill x

	button .sech.butt.b0 -text Search -bd 3 -highlightthickness 0 \
		-command {
			if {[.sech.ent.search get] != ""} {
				if {![Search_CH]} {
				set STRING [.sech.ent.search get]
				Message_Skeleton -icon info -button O.K. \
					-message "$STRING:No match."
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
				}
			} else {
				Message_Skeleton -icon error -button O.K. \
					-message "Input String."
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
			}
		}
	button .sech.butt.b1 -text Replace -bd 3 -highlightthickness 0 \
		-command {
			if {[.sech.ent.search get] != ""} {
				if {[.sech.ent.replace get] == ""} {
					Message_Skeleton -icon question -button {Yes No} \
						-message "Check!\nDelete [.sech.ent.search get]?"
					if {$FONT != ""} {
						Change_Font $FONT .msgskeleton
					}
					if {$F_COLOR != "" && $B_COLOR != ""} {
						Change_Color $F_COLOR $B_COLOR .msgskeleton
					}
					.msgskeleton.butt.0 configure -command {
						destroy .msgskeleton
						Replace_CH
					}
					.msgskeleton.butt.1 configure -command {destroy .msgskeleton}
				} else {
					Replace_CH
				}
			} else {
				Message_Skeleton -icon error -button O.K. \
					-message "Input String."
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
			}
		}

	menubutton .sech.butt.b2 -text Option -menu .sech.butt.b2.set \
		-relief raised -bd 3 -highlightthickness 0

	menu .sech.butt.b2.set -tearoff 0
	.sech.butt.b2.set add cascade -label Search -menu .sech.butt.b2.set.search
	.sech.butt.b2.set add cascade -label Replace \
		-menu .sech.butt.b2.set.replace

	menu .sech.butt.b2.set.search -tearoff 0
	.sech.butt.b2.set.search add radiobutton -label Up \
		-variable SEARCH -value Up
	.sech.butt.b2.set.search add radiobutton -label Down \
		-variable SEARCH -value Down

	menu .sech.butt.b2.set.replace -tearoff 0
	.sech.butt.b2.set.replace add radiobutton -label "Only One" \
		-variable REPLACE -value One
	.sech.butt.b2.set.replace add radiobutton -label "About All" \
		-variable REPLACE -value All

	button .sech.butt.b3 -text Clear -bd 3 -highlightthickness 0 \
		-command {
			.sech.ent.search delete 0 end
			.sech.ent.replace delete 0 end
			.ch.main.text tag remove SEARCH_TAG 1.0 end
			.ch.main.text tag remove SEARCH_ALL_TAG 1.0 end
			focus .sech.ent.search
			.ch.main.text see end
		}
	button .sech.butt.b4 -text Cancel -bd 3 -highlightthickness 0 \
		-command {
			if [winfo exists .sech] {destroy .sech}
			.ch.main.text tag remove SEARCH_TAG 1.0 end
			.ch.main.text tag remove SEARCH_ALL_TAG 1.0 end
		}

	pack .sech.butt.b0 .sech.butt.b1 .sech.butt.b2 \
		.sech.butt.b3 .sech.butt.b4 -side left -fill x


	frame .sech.space -highlightthickness 0
	pack .sech.space -side top -fill both -expand 1


	frame .sech.label -highlightthickness 0
	pack .sech.label -side left

	label .sech.label.search -text Search -anchor w \
		-highlightthickness 0
	pack .sech.label.search -side top -fill x

	label .sech.label.replace -text Replace -anchor w \
		-highlightthickness 0
	pack .sech.label.replace -side top -fill x


	frame .sech.ent -highlightthickness 0
	pack .sech.ent -side left -fill x -expand 1

	entry .sech.ent.search -highlightthickness 0
	pack .sech.ent.search -side top -fill x

	entry .sech.ent.replace -highlightthickness 0
	pack .sech.ent.replace -side top -fill x
	

	focus .sech.ent.search
	Tab_off
	Control

	foreach BIND {Return Tab Shift-Tab Down Control-n} {
		bind .sech.ent.search <$BIND> {focus .sech.ent.replace}
	}
	foreach BIND {Return Tab Shift-Tab Up Control-p} {
		bind .sech.ent.replace <$BIND> {focus .sech.ent.search}
	}

	if {$FONT != ""} {
		Change_Font $FONT .sech
	}
	if {$F_COLOR != "" && $B_COLOR != ""} {
		Change_Color $F_COLOR $B_COLOR .sech
	}
	Win_Size .sech
	wm resizable .sech 1 0
}

#	Search string on Command Histry window
proc Search_CH {} {
	global SEARCH FONT F_COLOR B_COLOR

	if {![winfo exists .sech.ent.search]} {
		Message_Skeleton -icon warning -button O.K.\
			-message "Warning!\nWhat's happen?"
		if {$FONT != ""} {
			Change_Font $FONT .msgskeleton
		}
		if {$F_COLOR != "" && $B_COLOR != ""} {
			Change_Color $F_COLOR $B_COLOR .msgskeleton
		}
		.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
		return 1
	}


	.ch.main.text tag remove SEARCH_ALL_TAG 1.0 end
	.ch.main.text tag configure SEARCH_ALL_TAG \
		-foreground #fffffffff -background #000000000
	set CURSOL [.ch.main.text index insert]
	set CUR 1.0
	set STRING [.sech.ent.search get]
	if {$STRING != ""} {
		while {[set CUR [.ch.main.text search -count LENGTH -regexp --\
				$STRING $CUR end]] != ""} {
			.ch.main.text tag add SEARCH_ALL_TAG \
				$CUR "$CUR + $LENGTH char"
			set CUR [.ch.main.text index "$CUR + $LENGTH char"]
		}
	}
	.ch.main.text index $CURSOL

	switch $SEARCH {
		Up {
			if [Search_Up_CH] {
				return 1
			} else {
				return 0
			}
		}
		Down {
			if [Search_Down_CH] {
				return 1
			} else {
				return 0
			}
		}
		default {
			Message_Skeleton -icon error -button O.K. \
				-message "Click \"Option\" button.\nAnd check search up or down."
			if {$FONT != ""} {
				Change_Font $FONT .msgskeleton
			}
			if {$F_COLOR != "" && $B_COLOR != ""} {
				Chane_Color $F_COLOR $B_COLOR .msgskeleton
			}
			.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
			return 1
		}
	}
}

#	Search mode is "up"
proc Search_Up_CH {} {
	.ch.main.text tag remove SEARCH_TAG 1.0 end
	.ch.main.text tag configure SEARCH_TAG \
		-foreground #fffffffff -background #ccc000000

	set CURSOL [.ch.main.text index insert]
	set STRING [.sech.ent.search get]
	set STOP 1.0

	set INDEX [.ch.main.text search -backwards \
		-count LENGTH -regexp -- $STRING $CURSOL $STOP]

	if {$INDEX != ""} {
		scan $INDEX %d.%d LINE HEAD
		set TAIL [expr $HEAD + $LENGTH]
		.ch.main.text tag add SEARCH_TAG $LINE.$HEAD $LINE.$TAIL
		.ch.main.text mark set insert $LINE.$HEAD
		.ch.main.text yview -pickplace insert
	} else {
		.ch.main.text mark set insert 1.0
		return 0
	}
	return 1
}

#	Search mode is "down"
proc Search_Down_CH {} {
	.ch.main.text tag remove SEARCH_TAG 1.0 end
	.ch.main.text tag configure SEARCH_TAG \
		-foreground #fffffffff -background #ccc000000

	set CURSOL [.ch.main.text index insert]
	set STRING [.sech.ent.search get]
	set STOP [.ch.main.text index end]

	set INDEX [.ch.main.text search -count LENGTH -regexp \
		-- $STRING $CURSOL $STOP]

	if {$INDEX != ""} {
		scan $INDEX %d.%d LINE HEAD
		set TAIL [expr $HEAD + $LENGTH]
		.ch.main.text tag add SEARCH_TAG $LINE.$HEAD $LINE.$TAIL
		.ch.main.text mark set insert $LINE.$TAIL
		.ch.main.text yview -pickplace insert
	} else {
		.ch.main.text mark set insert end
		return 0
	}
	return 1
}

#	Replace string on Command Histry window
proc Replace_CH {} {
	global REPLACE FONT F_COLOR B_COLOR errorCode errorInfo

	if {![winfo exists .sech.ent.replace]} {
		Message_Skeleton -icon warning -button O.K. \
			-message "Warning!\nWhat's happen?"
		if {$FONT != ""} {
			Change_Font $FONT .msgskeleton
		}
		if {$F_COLOR != "" && $B_COLOR != ""} {
			Change_Color $F_COLOR $B_COLOR .msgskeleton
		}
		.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
		return
	}

	set STRING [.sech.ent.search get]

	switch $REPLACE {
		One {
			if {![Replace_One_CH]} {
				Message_Skeleton -icon info -button O.K. \
					-message "$STRING:No match."
				if {$FONT != ""} {
					Change_Font $FONT .msgskeleton
				}
				if {$F_COLOR != "" && $B_COLOR != ""} {
					Change_Color $F_COLOR $B_COLOR .msgskeleton
				}
				.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
			}
		}
		All {
			Message_Skeleton -icon question -button {Yes No} \
				-message "Check!\nReplace all?"
			if {$FONT != ""} {
				Change_Font $FONT .msgskeleton
			}
			if {$F_COLOR != "" && $B_COLOR != ""} {
				Change_Color $F_COLOR $B_COLOR .msgskeleton
			}
			.msgskeleton.butt.0 configure -command {
				destroy .msgskeleton
				Replace_All_CH
			}
			.msgskeleton.butt.1 configure -command {destroy .msgskeleton}
		}
		default {
			Message_Skeleton -icon warning -button O.K. \
				-message "Click \"Option\" button.\nAnd check replace one or all."
			if {$FONT != ""} {
				Change_Font $FONT .msgskeleton
			}
			if {$F_COLOR != "" && $B_COLOR != ""} {
				Change_Color $F_COLOR $B_COLOR .msgskeleton
			}
			.msgskeleton.butt.0 configure -command {destroy .msgskeleton}
		}
	}
}

#	Replace mode is "one"
proc Replace_One_CH {} {
	if {[set RANGE [.ch.main.text tag range SEARCH_TAG]] == ""} {
		if {![Search_CH]} {
			return 0
		} else {
			return 1
		}
	}

	if {[.sech.ent.search get] != [eval ".ch.main.text get $RANGE"]} {
		if {![Search_CH]} {
			return 0
		} else {
			set RANGE [.ch.main.text tag range SEARCH_TAG]
		}
	}

	.ch.main.text tag remove SEARCH_TAG 1.0 end
	eval .ch.main.text delete $RANGE
	set INSERT [lindex [split $RANGE] 0]

	if {![catch {.sech.ent.replace get} STRING]} {
		.ch.main.text insert $INSERT $STRING
		scan $INSERT %d.%d LINE HEAD
		set TAIL [expr [string length $STRING] + $HEAD]
		.ch.main.text tag add SEARCH_TAG $LINE.$HEAD $LINE.$TAIL
		if {![Search_CH]} {return 0}
	}
	if {$errorCode != "NONE"} {
		set errorCode NONE
	}
	if {$errorInfo != ""} {
		set errorInfo ""
	}
	return 1
}

#	Replace mode is "all"
proc Replace_All_CH {} {
	while {[Replace_One_CH] != 0} {}
}
